yonatan.lourie
204767644

src.BrickerGameManager.java -
The main class that initialize the game.
For now, the game is not that complex, so the initialization not that long to be contained only in one class.
This class is creating all the objects of the game, when most of the features are implemented upon GameObject class.

/brick_strategies
    CollisionStrategy.java -
    The collision strategy is just a guideline for some objects what to do when some other object is touching them.
    The main idea of this class is the parameter gameObjectCollection which enable this class to actually do something
    in the game without inherit from GameObject. That is because the collision itself is already implemented in
    GameObject, and in this class we are just giving it more specific details (when brick is getting hit, it will be
    removed, and the bricksCounter will be decremented for example).

/src.src.gameobjects



    Ball.java -
    Inherit from GameObject. The ball is a GameObject so it the most convenient thing to do.


    BallCollisionCountDown.java -
    Kind of wrapper that extends the the methods of ball. the main goal of this class is to count the ball collision
    number.

    BotPaddle.java -
    AddBotPaddleStrategy is uses this class, similar to the MockPaddle class, but here the botPaddle dont have
    user input and he have a simple logic to help or to distract the player(good bot vs bad bot).

    Brick.java -
    Inherited from GameObject, though the collision is implemented in the brick_strategies class (will be more complex
    in the future).

    GraphicLifeCounter.java -
    The most important parameter here is the gameObjectCollection which enable us to control the game from this
    particular class.

    NumericLifeCounter.java -
    The most important parameter here is the gameObjectCollection which enable us to control the game from this
    particular class.


    Paddle.java
    The paddle class is inherited from GameObject, mainly due to the Vector2 class which enable us to control
    the movement of the GameObject pretty easily.


    -----------------------------------

    The design pattern of the whole program is pretty simple.
    The main game (BrickerGameManager) dont have some complicated design patterns.
    The more complicated design pattern is in the brick_strategies package.
    Ive constructed the interface


     |-brick_strategies
      |  |-CollisionStrategy.java -
            Interface the construct the base methods for all the collision strategies pattern

      |  |-AddPaddleStrategy.java
            extends RemoveBrickStrategyDecorator
      |  |-BrickStrategyFactory.java
      |  |-ChangeCameraStrategy.java
      |  |-PuckStrategy.java
      |  |-RemoveBrickStrategy.java
      |  |-RemoveBrickStrategyDecorator.java
      |  |-DoubleStrategy.java
      |  |-AddBotPaddleStrategy.java
      |-BrickerGameManager.java
      |-gameobjects
      |  |-Ball.java
      |  |-Paddle.java
      |  |-Brick.java
      |  |-NumericLifeCounter.java
      |  |-GraphicLifeCounter.java
      |  |-BallCollisionCountdownAgent.java
      |  |-MockPaddle.java
      |  |-Puck.java
      |  |-BotPaddle.java
      |-algo_questions
      |  |-Solutions.java



alotStudyTime
 * After sorting two arrays, we iterate to find the  biggest assignment that matchees the biggest time slot,
     * This problem does not specify that any task has a different value or that we can arrange two tasks in a single time slot
     * The goal of the search is simply to return as many tasks as possible to execute.