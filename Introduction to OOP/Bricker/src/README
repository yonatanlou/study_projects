yonatan.lourie
204767644

README 3_1
src.BrickerGameManager.java -
The main class that initialize the game.
For now, the game is not that complex, so the initialization not that long to be contained only in one class.
This class is creating all the objects of the game, when most of the features are implemented upon GameObject class.

/brick_strategies
    CollisionStrategy.java -
    The collision strategy is just a guideline for some objects what to do when some other object is touching them.
    The main idea of this class is the parameter gameObjectCollection which enable this class to actually do something
    in the game without inherit from GameObject. That is because the collision itself is already implemented in
    GameObject, and in this class we are just giving it more specific details (when brick is getting hit, it will be
    removed, and the bricksCounter will be decremented for example).

/src.src.gameobjects



    Ball.java -
    Inherit from GameObject. The ball is a GameObject so it the most convenient thing to do.



    Brick.java -
    Inherited from GameObject, though the collision is implemented in the brick_strategies class (will be more complex
    in the future).

    GraphicLifeCounter.java -
    The most important parameter here is the gameObjectCollection which enable us to control the game from this
    particular class.

    NumericLifeCounter.java -
    The most important parameter here is the gameObjectCollection which enable us to control the game from this
    particular class.


    Paddle.java
    The paddle class is inherited from GameObject, mainly due to the Vector2 class which enable us to control
    the movement of the GameObject pretty easily.


---------------------------------------------------------------------------------------------------------


README 3_2

The design pattern of the whole program is pretty simple.
The main game (BrickerGameManager) don't have some complicated design patterns.
The more complicated design pattern is in the brick_strategies package.
Ive managed to use smart design patterns to create different collision scenarios to the bricks in the game.
Ive constructed the interface CollisionStrategy that will hold the reference type for each one of the strategies.
The RemoveBrickStrategy is the basic strategy that only brake the brick without supplements.
So i wanted to use this class as a basis for all the more complicated classes, and for that, ive created the
RemoveBrickStrategyDecorator which enable the more complicated classes more functionality on the eay they
are implemented.
The strategies are pretty straightforward so ill not elaborate on each one of them.
The BrickStrategyFactory main goal is to generate a random strategy for each brick.
Note that i implemented to double strategy inside the factory class (mainly because i didn't succeed to create
a DoubleStrategy class good enough).

The main object that ive added are:

BallCollisionCountDown.java -
Kind of wrapper that extends the the methods of ball. the main goal of this class is to count the ball collision
number.

BotPaddle.java -
AddBotPaddleStrategy is uses this class, similar to the MockPaddle class, but here the botPaddle don't have
user input and he have a simple logic to help or to distract the player(good bot vs bad bot).



algo_questions -

alotStudyTime
After sorting two arrays, we iterate to find the  biggest assignment that matches the biggest time slot,
This problem does not specify that any task has a different value or that we can arrange two tasks in a single time slot
The goal of the search is simply to return as many tasks as possible to execute.


minLeap
In this case, we want to compare the shortest jump track possible.
We keep the maximum leap steps of our last jump, our current maximum leap,
and the maximum leap we could possibly make next.
Setting the max jump for the next step to our current unit and then comparing it with all options after the leap.
After the leap, the preceding step becomes the current unit, the next unit becomes the current unit,
then another iteration, and so on.





numTrees

We provide an empty array of n trees sizes. For the empty option of tree size = 0, there is only one possible value.
We then iterate through all the different tree sizes. Finally, we iterate over all possible tree sizes at the root.
Unique trees can be calculated using variable sum.